// _grid.scss
// Goal: Implement a flexible and responsive grid system designed to support a wide range of layouts and content types. This system utilizes CSS Grid to provide a robust foundation for designing layouts that need to adapt to different screen sizes, from mobile devices to large desktop screens. The grid is defined with customizable properties, such as the number of columns, gutter sizes, and responsive breakpoints, allowing for precise control over the layout's behavior at various viewport widths.
//
// The .grid class establishes the grid container, setting up a default layout that can be modified through nested .cell classes. These cells are designed to span a specific number of columns based on the screen size, ensuring that content reflows appropriately as the viewport changes. The system uses a series of predefined breakpoints to apply responsive styles, dynamically adjusting the layout's structure to provide an optimal viewing experience across all devices.
//
// Features:
// - Customizable grid columns and gutters through SCSS variables.
// - Responsive design with predefined breakpoints, enabling the grid to adjust to different screen sizes.
// - Utility classes for cells to span various numbers of columns, offering flexibility in layout composition.
// - Min-content row heights to ensure that rows adjust to their content, enhancing the grid's adaptability.
//
// Usage: Apply the .grid class to a container element to initiate the grid system. Use the .cell class on child elements, specifying the number of columns they should span at different breakpoints for responsive behavior. This setup supports a diverse range of layout patterns, from simple card layouts to complex compositions, making it a versatile tool for web development projects.


.grid {
    display: grid;
    width: 100%;
    margin: 0 auto;
    grid-gap: $grid-gutters;
    grid-template-columns: repeat($grid-columns, 1fr);
    grid-auto-rows: min-content; // Grid row height set to minimum content

    .cell {
        box-sizing: border-box;
        position: relative;
    
    }

    // Iterate through each breakpoint and create media queries
    @each $breakpoint, $value in $breakpoints {
        $next-value: next-breakpoint-value($breakpoint);

        // For 'xs', apply styles as the base case, without media query
        @if $breakpoint == xs {
            @for $i from 1 through $grid-columns {
                .cell.#{$breakpoint}#{$i} {
                    grid-column: span #{$i};
                }
            }
        }

        @else if $next-value != null {

            // Use min-width for current breakpoint, and max-width for the next (if available)
            @media (min-width: $value) and (max-width: #{($next-value - 1)}) {
                @for $i from 1 through $grid-columns {
                    .cell.#{$breakpoint}#{$i} {
                        grid-column: span #{$i};
                    }
                }
            }
        }

        @else {

            // For the last breakpoint, apply min-width without a max-width limit
            @media (min-width: $value) {
                @for $i from 1 through $grid-columns {
                    .cell.#{$breakpoint}#{$i} {
                        grid-column: span #{$i};
                    }
                }
            }
        }
    }
}

